 // Ask 3rd party to load mesh
  cgltf_options options = {};
  cgltf_data* data = nullptr;
  cgltf_result result = cgltf_parse_file(&options, path.c_str(), &data);

  assert(cgltf_parse_file(&options, path.c_str(), &data) ==
         cgltf_result_success);

  assert(cgltf_load_buffers(&options, data, path.c_str()) ==
         cgltf_result_success);

  assert(cgltf_validate(data) == cgltf_result_success);

  std::cout << "Type: " << data->file_type << std::endl;
  std::cout << "Meshes: " << data->meshes_count << std::endl;

  // TODO: should prealloc depending on mesh size
  // std::vector<int> indices;
  std::vector<float> positions;
  std::vector<float> normals;
  std::vector<float> colors;
  std::vector<float> uvs;
  bool has_position = false;
  bool has_normal = false;
  bool has_color = false;
  bool has_uv = false;
  for (int i = 0; i < data->meshes_count; ++i) {
    auto mesh = data->meshes[i];
    for (int j = 0; j < mesh.primitives_count; ++j) {
      auto primitive = mesh.primitives[j];

      // Copy each index
      // CPUBuffer<int> indices = {};
      // indices.data = (int*)malloc(sizeof(int) * primitive.indices->count);
      auto rawIndices =
          (unsigned short*)primitive.indices->buffer_view->buffer->data;
      std::cout << "Indices::Stride" << primitive.indices->stride << std::endl;
      std::cout << "BufferView::Stride"
                << primitive.indices->buffer_view->stride << std::endl;

      assert(primitive.indices->component_type == cgltf_component_type_r_16u);
      assert(primitive.indices->buffer_view->type !=
             cgltf_buffer_view_type_invalid);

      for (int n = 0; n < primitive.indices->count; n++) {
        std::cout << "Index nÂ°<< " << n << ": " << rawIndices[n] << std::endl;
      }

      int nbData = 0;
      for (int k = 0; k < primitive.attributes_count; ++k) {
        auto attribute = primitive.attributes[k];
        switch (attribute.type) {
          case cgltf_attribute_type_position: {
            // Nice, we need that
            // TODO: block of code appearing 4 times, refactor into a function
            auto buffer = (float*)attribute.data->buffer_view->buffer->data;
            positions.reserve(attribute.data->count);
            nbData = attribute.data->count;
            for (int l = 0; l < attribute.data->count; ++l) {
              has_position = true;
              positions.push_back(buffer[l]);
              // std::cout << "POSITION: " << buffer[l] << std::endl;
            }
            break;
          }
          case cgltf_attribute_type_normal: {
            // Nice, we need that
            auto buffer = (float*)attribute.data->buffer_view->buffer->data;
            normals.reserve(attribute.data->count);
            for (int l = 0; l < attribute.data->count; ++l) {
              has_normal = true;
              normals.push_back(buffer[l]);
            }
            break;
          }
          case cgltf_attribute_type_color: {
            // Nice, we need that
            auto buffer = (float*)attribute.data->buffer_view->buffer->data;
            colors.reserve(attribute.data->count);
            for (int l = 0; l < attribute.data->count; ++l) {
              has_color = true;
              colors.push_back(buffer[l]);
            }
            break;
          }
          case cgltf_attribute_type_texcoord: {
            // Nice, we need that
            auto buffer = (float*)attribute.data->buffer_view->buffer->data;
            uvs.reserve(attribute.data->count);
            for (int l = 0; l < attribute.data->count; ++l) {
              has_uv = true;
              uvs.push_back(buffer[l]);
            }
            break;
          }
          default: {
            // This is sad, but we don't care
            break;
          }
        }
      }
      assert(positions.size() == normals.size());
      // Re-construct a cpu buffer from those components
      auto vertices = new float[11 * nbData];
      for (int m = 0; m < nbData; m += 11) {
        vertices[m + 0] = positions[m + 0];
        vertices[m + 1] = positions[m + 1];
        vertices[m + 2] = positions[m + 2];

        vertices[m + 3] = normals[m + 0];
        vertices[m + 4] = normals[m + 1];
        vertices[m + 5] = normals[m + 2];

        if (has_color) {
          vertices[m + 6] = colors[m + 0];
          vertices[m + 7] = colors[m + 1];
          vertices[m + 8] = colors[m + 2];
        } else {
          vertices[m + 6] = 1.0f;
          vertices[m + 7] = 0.3f;
          vertices[m + 8] = 0.6f;
        }
        if (has_uv) {
          vertices[m + 9] = uvs[m + 0];
          vertices[m + 10] = uvs[m + 1];
        } else {
          vertices[m + 9] = 0.0f;
          vertices[m + 10] = 0.0f;
        }
      }

      CPUBuffer<float> cpuBuffer = {};
      cpuBuffer.data = vertices;
      cpuBuffer.nbElements = 11 * nbData;
      cpuBuffer.stride = 11;

      return cpuBuffer;
      // TODO: make loader able to merge primitive
      // break;
    }
    // TODO: make loader able to merge meshes
    break;
  }